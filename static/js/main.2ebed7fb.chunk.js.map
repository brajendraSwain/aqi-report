{"version":3,"sources":["redux/aqi/aqi.actions.js","utils/constants.js","components/AqiTable/AqiTable.jsx","components/line-chart/LineChart.jsx","pages/home-page/HomePage.jsx","App.js","reportWebVitals.js","redux/aqi/aqi.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["addToHistory","cityData","type","payload","AQI_COLOR_CLASSES","class","range","CHANGE_TYPE_CLASS","cityColorStateBackUp","aqiColorScale","map","d","AqiRow","rowData","onRowClick","colorClass","value","find","getColorClass","Math","round","aqi","changeTypeClass","newColor","city","backUpColor","indexOf","getChangeTypeClass","aqiClass","rowClass","className","onClick","moment","lastUpdated","fromNow","AqiHeadRow","sortByCity","a","b","connect","state","aqiCityData","allCityData","props","dispatch","evt","ctrlKey","addOrRemoveCityToCompare","Object","entries","sort","key","aData","bind","LineChart","hovered","seriesDataList","this","history","cities","length","maxLength","len","min","historyToBeIterated","slice","allSeries","forEach","i","hData","s","x","y","push","getDataSeries","xType","height","width","window","innerWidth","margin","bottom","tickLabelAngle","series","index","style","strokeWidth","data","getNull","onValueMouseOver","setState","onValueMouseOut","orientation","items","PureComponent","citiesInCompare","HomePage","aqiData","once","_this","ws","WebSocket","onopen","console","log","onmessage","onAQIDataChange","JSON","parse","setInterval","Date","mappedData","fromEntries","toFixed","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","by","order","getUpdatedHistory","oldHistory","newData","newHistory","aqiReducer","action","cityToBeAdded","includes","filter","combineReducers","store","createStore","rootReducer","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2ebed7fb.chunk.js","sourcesContent":["export const addCityData = (cityData) => ({\n    type: \"ADD_DATA\",\n    payload: cityData,\n});\n\nexport const addToHistory = (cityData) => ({\n    type: \"ADD_TO_HISTORY\",\n    payload: cityData,\n});\n\nexport const addOrRemoveCityToCompare = (city) => ({\n    type: \"ADD_REMOVE_CITY_FOR_COMPARE\",\n    payload: city,\n});\n\nexport const selectSingleCityInChart = (city) => ({\n    type: \"SELECT_SINGLE_CITY\",\n    payload: city,\n});\n","export const AQI_COLOR_CLASSES = [\n    { class: \"good\", range: [0, 50] },\n    { class: \"satisfactory\", range: [51, 100] },\n    { class: \"moderate\", range: [101, 200] },\n    { class: \"poor\", range: [201, 300] },\n    { class: \"very_poor\", range: [301, 400] },\n    { class: \"severe\", range: [401, 500] },\n];\n\nexport const CHANGE_TYPE_CLASS = {\n    positive: \"positive\",\n    negative: \"negative\",\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\n\nimport \"./AqiTable.scss\";\nimport { AQI_COLOR_CLASSES, CHANGE_TYPE_CLASS } from \"../../utils/constants\";\nimport {\n    addOrRemoveCityToCompare,\n    selectSingleCityInChart,\n} from \"../../redux/aqi/aqi.actions\";\n\nconst cityColorStateBackUp = {};\n// order --- good -> severe\nconst aqiColorScale = AQI_COLOR_CLASSES.map((d) => d.class);\n\nexport const AqiTable = (props) => {\n    const { aqiCityData, dispatch } = props;\n    function onRowClick(rowData, evt) {\n        if (evt.ctrlKey) {\n            dispatch(selectSingleCityInChart(rowData.city));\n        } else {\n            dispatch(addOrRemoveCityToCompare(rowData.city));\n        }\n    }\n    return (\n        <table className=\"aqi-table\">\n            <tbody>\n                <AqiHeadRow />\n                {Object.entries(aqiCityData)\n                    .sort(sortByCity)\n                    .map(([key, aData]) => (\n                        <AqiRow\n                            key={key}\n                            rowData={aData}\n                            onRowClick={onRowClick.bind(null, aData)}\n                        />\n                    ))}\n            </tbody>\n        </table>\n    );\n};\n\nexport function AqiRow({ rowData, onRowClick }) {\n    const colorClass = getColorClass(Math.round(rowData.aqi));\n    const changeTypeClass = getChangeTypeClass(colorClass, rowData.city);\n    const aqiClass = `aqi-cell ${colorClass}`;\n    const rowClass = `aqi-row bg-animate ${changeTypeClass}`;\n    cityColorStateBackUp[rowData.city] = colorClass;\n    return (\n        <tr className={rowClass} onClick={onRowClick}>\n            <td className=\"aqi-cell\">{rowData.city}</td>\n            <td className={aqiClass}>{rowData.aqi}</td>\n            <td className=\"aqi-cell\">\n                {moment(rowData.lastUpdated).fromNow()}\n            </td>\n        </tr>\n    );\n}\n\nexport function AqiHeadRow() {\n    return (\n        <tr className=\"aqi-head-row\">\n            <td className=\"aqi-cell\">City</td>\n            <td className=\"aqi-cell\">Current AQI</td>\n            <td className=\"aqi-cell\">Last Updated</td>\n        </tr>\n    );\n}\n\nexport function sortByCity([key, a], [key1, b]) {\n    if (a.city > b.city) {\n        return 1;\n    }\n\n    if (a.city > b.city) {\n        return -1;\n    }\n    return 0;\n}\n\nexport function getColorClass(value) {\n    return AQI_COLOR_CLASSES.find(\n        (d) => value >= d.range[0] && value <= d.range[1]\n    )?.class;\n}\n\nexport function getChangeTypeClass(newColor, city) {\n    const backUpColor = cityColorStateBackUp[city];\n    if (!backUpColor && aqiColorScale.indexOf(backUpColor) === -1) {\n        return \"\";\n    }\n    if (aqiColorScale.indexOf(newColor) < aqiColorScale.indexOf(backUpColor)) {\n        return CHANGE_TYPE_CLASS.positive;\n    }\n\n    if (aqiColorScale.indexOf(newColor) > aqiColorScale.indexOf(backUpColor)) {\n        return CHANGE_TYPE_CLASS.negative;\n    }\n    return \"\";\n}\n\nconst mapStateToProps = (state) => ({\n    aqiCityData: state.aqi.allCityData,\n});\n\nexport default connect(mapStateToProps)(AqiTable);\n","import React, { PureComponent } from \"react\";\nimport \"../../../node_modules/react-vis/dist/style.css\";\nimport {\n    XYPlot,\n    XAxis,\n    YAxis,\n    VerticalGridLines,\n    HorizontalGridLines,\n    LineMarkSeries,\n    DiscreteColorLegend,\n    Hint,\n} from \"react-vis\";\nimport \"./LineChart.scss\";\nimport { connect } from \"react-redux\";\n\nclass LineChart extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hovered: null,\n        };\n        this.seriesDataList = [];\n    }\n\n    render() {\n        const { history, cities } = this.props;\n        if (!cities.length) {\n            return (\n                <div className=\"line-container\">\n                    <div className=\"no-data\">\n                        No Cities are Selected <br /> Click on the row to see\n                        city in live chart\n                    </div>\n                </div>\n            );\n        }\n        const seriesDataList = getDataSeries(cities, history);\n        const { hovered } = this.state;\n        return (\n            <div className=\"line-container\">\n                <XYPlot\n                    xType=\"ordinal\"\n                    height={500}\n                    width={window.innerWidth - 650}\n                    margin={{ bottom: 70 }}\n                >\n                    <VerticalGridLines />\n                    <HorizontalGridLines />\n                    <XAxis tickLabelAngle={-45} />\n                    <YAxis />\n                    {seriesDataList.map((series, index) => {\n                        return (\n                            <LineMarkSeries\n                                key={cities[index]}\n                                style={{\n                                    strokeWidth: \"3px\",\n                                }}\n                                data={series}\n                                getNull={(d) => d.y !== null}\n                                onValueMouseOver={(d) =>\n                                    this.setState({\n                                        hovered: {\n                                            ...d,\n                                            series: cities[index],\n                                        },\n                                    })\n                                }\n                                onValueMouseOut={(d) =>\n                                    this.setState({ hovered: false })\n                                }\n                            />\n                        );\n                    })}\n                    {hovered && <Hint value={hovered} />}\n                    <DiscreteColorLegend\n                        orientation=\"horizontal\"\n                        width={window.innerWidth - 650}\n                        items={cities}\n                    />\n                </XYPlot>\n            </div>\n        );\n    }\n}\n\nfunction getDataSeries(cities, history) {\n    const maxLength = 13;\n    const len = Math.min(maxLength, history.length);\n    const historyToBeIterated =\n        history.length > len\n            ? history.slice(history.length - maxLength, history.length)\n            : history;\n    let allSeries = {};\n    cities.forEach((city) => {\n        allSeries[city] = [];\n    });\n    for (let i = 0; i < len; i++) {\n        cities.forEach((city) => {\n            const hData = historyToBeIterated[i][city];\n\n            const s = {\n                x: `${(len - i - 1) * 5} sec ago`,\n                y: hData?.aqi || null,\n            };\n            allSeries[city].push(s);\n        });\n    }\n    return cities.map((city) => allSeries[city]);\n}\n\nconst mapStateToProps = (state) => ({\n    history: state.aqi.history,\n    cities: state.aqi.citiesInCompare,\n});\n\nexport default connect(mapStateToProps)(LineChart);\n","import React, { PureComponent } from \"react\";\nimport { connect } from \"react-redux\";\nimport { addCityData, addToHistory } from \"../../redux/aqi/aqi.actions\";\nimport AqiTable from \"../../components/AqiTable/AqiTable\";\nimport \"./HomePage.scss\";\nimport LineChart from \"../../components/line-chart/LineChart\";\nexport class HomePage extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            aqiData: {},\n        };\n    }\n\n    componentDidMount() {\n        let once = true;\n        const _this = this;\n        let ws = new WebSocket(\"wss://city-ws.herokuapp.com\");\n        ws.onopen = function (evt) {\n            //Subscribe to the channel\n            console.log(\"open\", evt);\n        };\n        ws.onmessage = function (evt) {\n            _this.onAQIDataChange(JSON.parse(evt.data));\n            if (once) {\n                // first time data is to be pushed to history\n                const { dispatch, aqiCityData } = _this.props;\n                dispatch(addToHistory(aqiCityData));\n            }\n            once = false;\n        };\n\n        setInterval(() => {\n            const { dispatch, aqiCityData } = this.props;\n            dispatch(addToHistory(aqiCityData));\n        }, 5000);\n    }\n\n    onAQIDataChange(data) {\n        const lastUpdated = new Date();\n        const { dispatch, aqiCityData } = this.props;\n        const mappedData = Object.fromEntries(\n            data.map((aData) => [\n                aData.city,\n                { ...aData, aqi: +(+aData.aqi).toFixed(2), lastUpdated },\n            ])\n        );\n\n        dispatch(addCityData({ ...aqiCityData, ...mappedData }));\n    }\n\n    render() {\n        return (\n            <div className=\"home-page-container\">\n                <div className=\"heading\">Air Quality Monitoring</div>\n                <div className=\"body-container\">\n                    <AqiTable />\n                    <LineChart />\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    aqiCityData: state.aqi.allCityData,\n});\n\nexport default connect(mapStateToProps)(HomePage);\n","import \"./App.scss\";\nimport HomePage from \"./pages/home-page/HomePage\";\n\nfunction App() {\n  return <HomePage />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const INITIAL_STATE = {\n    allCityData: {},\n    sort: {\n        by: \"city\",\n        order: \"asc\",\n    },\n    history: [],\n    citiesInCompare: [],\n};\nconst aqiReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case \"ADD_DATA\":\n            return {\n                ...state,\n                allCityData: action.payload,\n            };\n        case \"ADD_TO_HISTORY\":\n            const newHistory = getUpdatedHistory(state.history, action.payload);\n            return {\n                ...state,\n                history: newHistory,\n            };\n        case \"ADD_REMOVE_CITY_FOR_COMPARE\":\n            let citiesInCompare = state.citiesInCompare;\n            const cityToBeAdded = action.payload;\n            if (citiesInCompare.includes(cityToBeAdded)) {\n                citiesInCompare = citiesInCompare.filter(\n                    (city) => city !== cityToBeAdded\n                );\n            } else {\n                citiesInCompare = [...citiesInCompare, cityToBeAdded];\n            }\n            return {\n                ...state,\n                citiesInCompare,\n            };\n        case \"SELECT_SINGLE_CITY\":\n            return {\n                ...state,\n                citiesInCompare: [action.payload],\n            };\n        default:\n            return state;\n    }\n};\n\nfunction getUpdatedHistory(oldHistory, newData) {\n    const maxLength = 60; // max 5 minutes of data\n    const newHistory = [...oldHistory, newData];\n    if (newHistory.length <= maxLength) {\n        return newHistory;\n    }\n    const [, ...rest] = newHistory;\n    return rest;\n}\n\nexport default aqiReducer;\n","import { combineReducers } from \"redux\";\nimport aqiReducer from \"./aqi/aqi.reducer\";\n\nexport default combineReducers({\n  aqi: aqiReducer,\n});\n","import { createStore } from \"redux\";\nimport rootReducer from \"./root-reducer\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}